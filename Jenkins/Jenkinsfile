node {

    try {

        stage('Checkout') {
            checkout scm
            sh 'git submodule update --init'
        }

        /*
        stage('Clean Project') {
            sh "./gradlew clean -PBUILD_NUMBER=${env.BUILD_NUMBER}"
        }
        */

        stage('Build Debug APK') {
            sh "./gradlew assembleDebug -PBUILD_NUMBER=${env.BUILD_NUMBER}"
        }

        stage('Build Espresso Tests') {
            sh "./gradlew assembleAndroidTest -PBUILD_NUMBER=${env.BUILD_NUMBER}"
        }

        #stage('Run UI Smoke Test') {
        #    sh "chmod u+x ./Jenkins/callPerfectoFromPipeline.sh && ./Jenkins/callPerfectoFromPipeline.sh"
        #}

        stage('Archive Artifacts') {
            archiveArtifacts artifacts: 'app/build/outputs/apk/*.apk', fingerprint: true
        }

    } catch (e) {
        // If there was an exception thrown, the build failed
        currentBuild.result = "FAILED"
        throw e
    } finally {
        // Success or failure, always send notifications
        notifyBuild(currentBuild.result)
    }
}


// TODO: paste from https://jenkins.io/blog/2016/07/18/pipline-notifications/
def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus = buildStatus ?: 'SUCCESS'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  def details = """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
}
